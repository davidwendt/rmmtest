
#include <rmm/rmm.h>
#include <stdio.h>    // for printf
#include <memory.h>   // for strlen

// exploded (2GB)                      not exploded (8GB)
// (0x7f018e00e000,     411248)        (0x7fd49000e000,     411248)
// (0x7f0198b60000,   32689152)        (0x7fd49ab60000,   32689152)
// (0x7f018ea62c00,  157919232)        (0x7fd490a62c00,  157919232)
// (0x7f01a36c0000,   65378304)        (0x7fd4a56c0000,   65378304)
// (0x7f018f4c5800,  315838464)        (0x7fd4914c5800,  315838464)
// (0x7f01ae220000,   98067456)        (0x7fd4b0220000,   98067456)
// (0x7f018ff28400,  473757696)        (0x7fd491f28400,  473757696)
// (0x7f01b8d80000,  130756608)        (0x7fd4bad80000,  130756608)
// (0x7f019098b000,  631676928)        (0x7fd49298b000,  631676928)
// (0x7f01c38e0000,  163445760)        (0x7fd4c58e0000,  163445760)
// (0x7f01913edc00,  789596160)        (0x7fd4933edc00,  789596160)
// (0x7f01ce440000,  196134912)        (0x7fd4d0440000,  196134912)
// (0x7f0191e50800,  947515392)        (0x7fd493e50800,  947515392)
// (0x7f01d8fa0000,  228824064)        (0x7fd4dafa0000,  228824064)
// (0x7f01928b3400, 1105434624)        (0x7fd4948b3400, 1105434624)
// (0x7f01e3b00000,  261513216)        (0x7fd4e5b00000,  261513216)
// (0x7f0193316000, 1263353856)        (0x7fd495316000, 1263353856)
// (0x7f01ee660000,  294202368)        (0x7fd4f0660000,  294202368)
// (0x7f0193d78c00, 1421273088)        (0x7fd495d78c00, 1421273088)
// (0x7f01f91c0000,  326891520)        (0x7fd4fb1c0000,  326891520)
// (0x7f01947db800, 1579192320)        (0x7fd4967db800, 1579192320)
// (0x7f0164000000,  359580672)        (0x7fd505d20000,  359580672)
// (0x7f019523e400, 1737111552)        (0x7fd49723e400, 1737111552)
// (0x7f014c000000,  392269824)        (0x7fd510880000,  392269824)
// (0x7f018e000000, 1895030784)        (0x7fd497ca1000, 1895030784)
// (0x7f0132000000,  424958976)        (0x7fd51b3e0000,  424958976)
// (0x7f018e000000, 2052950016)        (0x7fd498703c00, 2052950016)
// (0x7f0116000000,  457648128)        (0x7fd525f40000,  457648128)
// (0x7f018e000000, 2210869248)        (0x7fd499166800, 2210869248)
// (0x7f018e000000,  490337280)        (0x7fd530aa0000,  490337280)
// (0x7efff0000000, 2368788480)        (0x7fd499bc9400, 2368788480)
// (0x7f018e000000,  523026432)        (0x7fd53b600000,  523026432)
// (0x7efed4000000, 2526707712)        (0x7fd49a62c000, 2526707712)
// (0x7f018e000000,  555715584)        (0x7fd546160000,  555715584)
// (0x7efda8000000, 2684626944)        (0x7fd49b08ec00, 2684626944)
// (0x7f018e000000,  588404736)        (0x7fd550cc0000,  588404736)
// (0x7efc6c000000, 2842546176)        (0x7fd49baf1800, 2842546176)
// (0x7f018e000000,  621093888)        (0x7fd55b820000,  621093888)
// (0x7efb1c000000, 3000465408)        (0x7fd49c554400, 3000465408)
// (0x7f018e000000,  653783040)        (0x7fd566380000,  653783040)
// (0x7ef9bc000000, 3158384640)        (0x7fd49cfb7000, 3158384640)
//

// should be about 40-41 of these
size_t sizes[] = {
     411248,
   32689152,
  157919232,
   65378304,
  315838464,
   98067456,
  473757696,
  130756608,
  631676928,
  163445760,
  789596160,
  196134912,
  947515392,
  228824064,
 1105434624,
  261513216,
 1263353856,
  294202368,
 1421273088,
  326891520,
 1579192320,
  359580672,
 1737111552,
  392269824,
 1895030784,
  424958976,
 2052950016,
  457648128,
 2210869248,
  490337280,
 2368788480,
  523026432,
 2526707712,
  555715584,
 2684626944,
  588404736,
 2842546176,
  621093888,
 3000465408,
  653783040,
 3158384640
};

//
int main( int argc, char** argv )
{
    size_t poolSize = ((size_t)2)<<30;

    printf("Initial pool size = %ld GB\n", (poolSize>>30));
    rmmOptions_t options;
    options.allocation_mode = PoolAllocation;
    options.initial_pool_size = poolSize;
    options.enable_logging = false;
    rmmInitialize(&options);

    //
    int count = sizeof(sizes)/sizeof(size_t);
    printf("allocates = %d\n",count);

    // first one by itself
    char* buffer = 0;
    RMM_ALLOC(&buffer,sizes[0],0);
    printf("(%p,%11ld)\n",buffer,sizes[0]);
    RMM_FREE(buffer,0);
    
    // then 2 at a time
    for( int idx=1; idx < count; idx+=2 )
    {
        char* buffer1 = 0;
        size_t size1 = sizes[idx];
        char* buffer2 = 0;
        size_t size2 = sizes[idx+1];
        RMM_ALLOC(&buffer1,size1,0);
        RMM_ALLOC(&buffer2,size2,0);
        printf("(%p,%11ld)\n",buffer1,size1);
        printf("(%p,%11ld)\n",buffer1,size2);
        RMM_FREE(buffer2,0);
        RMM_FREE(buffer1,0);
    }

    // done
    printf("press enter to stop program\n");
    std::cin.ignore();

    return 0;
}
